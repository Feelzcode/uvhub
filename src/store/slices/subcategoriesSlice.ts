import { create } from 'zustand';
import { devtools, persist } from 'zustand/middleware';
import { Subcategory } from '../types';

// Initial state
const initialState = {
  subcategories: [] as Subcategory[],
  loading: false,
  error: null as string | null,
  selectedSubcategory: null as Subcategory | null,
};

// Store type
export type SubcategoriesStore = typeof initialState & {
  // State setters
  setSubcategories: (subcategories: Subcategory[]) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
  setSelectedSubcategory: (subcategory: Subcategory | null) => void;

  // CRUD operations
  addSubcategory: (subcategoryData: Partial<Subcategory>) => Promise<void>;
  updateSubcategory: (id: string, updates: Partial<Subcategory>) => Promise<void>;
  deleteSubcategory: (id: string) => Promise<void>;
  
  // Data fetching
  getSubcategories: () => Promise<void>;
  getSubcategoriesByCategory: (categoryId: string) => Promise<Subcategory[]>;
  getSubcategoryById: (id: string) => Subcategory | undefined;
  
  // Utility actions
  clearError: () => void;
  resetState: () => void;
};

// Create the store
export const useSubcategoriesStore = create<SubcategoriesStore>()(
  devtools(
    persist(
      (set, get) => ({
        ...initialState,

        // State setters
        setSubcategories: (subcategories: Subcategory[]) => set({ subcategories }),
        setLoading: (loading: boolean) => set({ loading }),
        setError: (error: string | null) => set({ error }),
        setSelectedSubcategory: (subcategory: Subcategory | null) => set({ selectedSubcategory: subcategory }),

        // CRUD operations
        addSubcategory: async (subcategoryData: Partial<Subcategory>) => {
          const { setLoading, setError } = get();
          
          setLoading(true);
          setError(null);

          try {
            // Here you would typically make an API call to create the subcategory
            // For now, we'll simulate the API call
            const newSubcategory: Subcategory = {
              id: `temp-${Date.now()}`, // This would be generated by the backend
              name: subcategoryData.name!,
              description: subcategoryData.description!,
              category_id: subcategoryData.category_id!,
              created_at: new Date(),
              updated_at: new Date(),
            };

            set((state) => ({
              subcategories: [...state.subcategories, newSubcategory],
              loading: false,
            }));
          } catch (error) {
            console.error('Error adding subcategory:', error);
            setError(error instanceof Error ? error.message : 'Failed to add subcategory');
            set({ loading: false });
          }
        },

        updateSubcategory: async (id: string, updates: Partial<Subcategory>) => {
          const { setLoading, setError } = get();
          
          setLoading(true);
          setError(null);

          try {
            // Here you would typically make an API call to update the subcategory
            set((state) => ({
              subcategories: state.subcategories.map((subcategory) =>
                subcategory.id === id
                  ? { ...subcategory, ...updates, updated_at: new Date() }
                  : subcategory
              ),
              loading: false,
            }));
          } catch (error) {
            console.error('Error updating subcategory:', error);
            setError(error instanceof Error ? error.message : 'Failed to update subcategory');
            set({ loading: false });
          }
        },

        deleteSubcategory: async (id: string) => {
          const { setLoading, setError } = get();
          
          setLoading(true);
          setError(null);

          try {
            // Here you would typically make an API call to delete the subcategory
            set((state) => ({
              subcategories: state.subcategories.filter((subcategory) => subcategory.id !== id),
              loading: false,
            }));
          } catch (error) {
            console.error('Error deleting subcategory:', error);
            setError(error instanceof Error ? error.message : 'Failed to delete subcategory');
            set({ loading: false });
          }
        },

        // Data fetching
        getSubcategories: async () => {
          const { setLoading, setError } = get();
          
          setLoading(true);
          setError(null);

          try {
            // Here you would typically make an API call to fetch subcategories
            // For now, we'll simulate the API call
            const mockSubcategories: Subcategory[] = [
              {
                id: '1',
                name: 'Smartphones',
                description: 'Mobile phones and smartphones',
                category_id: 'electronics',
                created_at: new Date('2024-01-01'),
                updated_at: new Date('2024-01-01'),
              },
              {
                id: '2',
                name: 'Laptops',
                description: 'Portable computers and laptops',
                category_id: 'electronics',
                created_at: new Date('2024-01-01'),
                updated_at: new Date('2024-01-01'),
              },
            ];

            set({ subcategories: mockSubcategories, loading: false });
          } catch (error) {
            console.error('Error fetching subcategories:', error);
            setError(error instanceof Error ? error.message : 'Failed to fetch subcategories');
            set({ loading: false });
          }
        },

        getSubcategoriesByCategory: async (/* categoryId: string */) => {
          const { subcategories } = get();
          // This would typically filter by category_id, but for now return all
          return subcategories;
        },

        getSubcategoryById: (id: string) => {
          const { subcategories } = get();
          return subcategories.find((subcategory) => subcategory.id === id);
        },

        // Utility actions
        clearError: () => set({ error: null }),
        resetState: () => set(initialState),
      }),
      {
        name: 'subcategories-storage',
        partialize: (state) => ({
          subcategories: state.subcategories,
          selectedSubcategory: state.selectedSubcategory,
        }),
      }
    ),
    {
      name: 'subcategories-store',
    }
  )
);
